import numpy as np
from CustomDecisionTree import CustomDecisionTree

class CustomGBDT:
    def __init__(self, n_estimators=100, learning_rate=0.1, max_depth=3):
        self.n_estimators = n_estimators
        self.learning_rate = learning_rate
        self.max_depth = max_depth
        self.models = []  # Здесь будем хранить базовые модели (деревья)
        
    def fit(self, X, y):
        # Инициализируем композицию предсказаний нулевым вектором
        predictions = np.zeros(len(y))
        
        for _ in range(self.n_estimators):
            # 1. Вычисление градиента
            gradient = y - predictions

            # Преобразовать градиент и метки классов в int64
            gradient = gradient.astype(np.int64)
            y = y.astype(np.int64)
            
            # 2. Обучение базовой модели (дерева) на градиенте
            tree = CustomDecisionTree(max_depth=self.max_depth)
            tree.fit(X, gradient)  # Используем градиент вместо меток классов
            print(gradient)
            # 3. Вычисление предсказаний базовой модели
            tree_predictions = tree.predict(X)
            
            # 4. Обновление композиции с учетом learning_rate
            predictions += self.learning_rate * tree_predictions
            
            # Добавляем базовую модель (дерево) в список
            self.models.append(tree)
    
    def predict(self, X):
        # Для предсказания суммируем предсказания всех базовых моделей
        predictions = np.zeros(len(X))
        for model in self.models:
            tree_predictions = model.predict(X)
            predictions += self.learning_rate * tree_predictions
        
        # Преобразуем предсказания в бинарные метки классов (например, 0 и 1)
        return np.where(predictions >= 0.5, 1, 0)